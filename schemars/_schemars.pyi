import typing

class FieldBase:
    def __init__(
        self,
        write_only: bool = False,
        strict: bool = False,
        call: bool = False,
        default: typing.Optional[typing.Any] = None,
        source: typing.Optional[str] = None,
        serialize_func: typing.Optional[typing.Callable] = None,
        alias: typing.Optional[str] = None,
        **kwargs: Any
    ) -> None: ...

class DateFieldBase(FieldBase):
    def __init__(self, format: typing.Optional[str] = None, **kwargs: Any) -> None: ...

class Str(FieldBase): ...
class Bytes(FieldBase): ...
class Int(FieldBase): ...
class Bool(FieldBase): ...
class Float(FieldBase): ...
class Decimal(FieldBase): ...
class Date(DateFieldBase): ...
class DateTime(DateFieldBase): ...

class Dict(FieldBase):
    def __init__(
        self, child: typing.Optional[FieldBase] = None, **kwargs: Any
    ) -> None: ...

class List(FieldBase):
    def __init__(self, child: typing.Optional[Any] = None, **kwargs: Any) -> None: ...

class Uuid(FieldBase): ...
class Any(FieldBase): ...

class Union(FieldBase):
    def __init__(self, fields: Any, **kwargs: Any) -> None: ...

class Method:
    def __init__(self, method_name: typing.Optional[str] = None) -> None: ...

class Schema:
    def __new__(cls, **kwargs) -> None: ...
    def __init__(self, **kwargs) -> None: ...
    def serialize(
        self, instance: Any, many: bool = False, cls: typing.Optional[Any] = None
    ) -> Any: ...

class ValidationError(BaseException):
    def __init__(self, errors: Any) -> None: ...
